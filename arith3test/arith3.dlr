S := AddExpression;

AddExpression :=
	MulExpression;
	| AddExpression plus MulExpression; {:
		Token mulExpr = this.tokenStack[-1];
		Token op = this.tokenStack[-2];
		Token addExpr = this.tokenStack[-3];
		size_t pos = this.ast.insert(op, termAddExpression);
		this.ast.append(addExpr.getTreeIdx());
		this.ast.append(mulExpr.getTreeIdx());
		ret = Token(mulExpr.getLoc(), termAddExpression, pos); :}

	| AddExpression minus MulExpression; {:
		Token mulExpr = this.tokenStack[-1];
		Token op = this.tokenStack[-2];
		Token addExpr = this.tokenStack[-3];
		size_t pos = this.ast.insert(op, termAddExpression);
		this.ast.append(addExpr.getTreeIdx());
		this.ast.append(mulExpr.getTreeIdx());
		ret = Token(mulExpr.getLoc(), termAddExpression, pos); :}

MulExpression :=
	UnaryExpression;
	| MulExpression star UnaryExpression; {:
		Token unExpr = this.tokenStack[-1];
		Token op = this.tokenStack[-2];
		Token mulExpr = this.tokenStack[-3];
		size_t pos = this.ast.insert(op, termMulExpression);
		this.ast.append(mulExpr.getTreeIdx());
		this.ast.append(unExpr.getTreeIdx());
		ret = Token(mulExpr.getLoc(), termMulExpression, pos); :}

	| MulExpression div UnaryExpression; {:
		Token unExpr = this.tokenStack[-1];
		Token op = this.tokenStack[-2];
		Token mulExpr = this.tokenStack[-3];
		size_t pos = this.ast.insert(op, termMulExpression);
		this.ast.append(mulExpr.getTreeIdx());
		this.ast.append(unExpr.getTreeIdx());
		ret = Token(mulExpr.getLoc(), termMulExpression, pos); :}

	| MulExpression modulo UnaryExpression; {:
		Token unExpr = this.tokenStack[-1];
		Token op = this.tokenStack[-2];
		Token mulExpr = this.tokenStack[-3];
		size_t pos = this.ast.insert(op, termMulExpression);
		this.ast.append(mulExpr.getTreeIdx());
		this.ast.append(unExpr.getTreeIdx());
		ret = Token(mulExpr.getLoc(), termMulExpression, pos); :}

UnaryExpression :=
	PostfixExpression;
	| increment UnaryExpression; {:Token op = this.tokenStack[-2];
		Token unExpr = this.tokenStack[-1];
		size_t pos = this.ast.insert(op, termUnaryExpression);
		this.ast.append(unExpr.getTreeIdx()); 
		ret = Token(op.getLoc(), termUnaryExpression, pos); :}

	| decrement UnaryExpression; {:Token op = this.tokenStack[-2];
		Token unExpr = this.tokenStack[-1];
		size_t pos = this.ast.insert(op, termUnaryExpression);
		this.ast.append(unExpr.getTreeIdx()); 
		ret = Token(op.getLoc(), termUnaryExpression, pos); :}

	| minus UnaryExpression; {:Token op = this.tokenStack[-2];
		Token unExpr = this.tokenStack[-1];
		size_t pos = this.ast.insert(op, termUnaryExpression);
		this.ast.append(unExpr.getTreeIdx()); 
		ret = Token(op.getLoc(), termUnaryExpression, pos); :}

	| plus UnaryExpression; {:Token op = this.tokenStack[-2];
		Token unExpr = this.tokenStack[-1];
		size_t pos = this.ast.insert(op, termUnaryExpression);
		this.ast.append(unExpr.getTreeIdx()); 
		ret = Token(op.getLoc(), termUnaryExpression, pos); :}

	| star UnaryExpression; {:Token op = this.tokenStack[-2];
		Token unExpr = this.tokenStack[-1];
		size_t pos = this.ast.insert(op, termUnaryExpression);
		this.ast.append(unExpr.getTreeIdx()); 
		ret = Token(op.getLoc(), termUnaryExpression, pos); :}

PostfixExpression :=
	integer; {:Token t = this.tokenStack.back();
		size_t pos = this.ast.insert(t, termPostfixExpression);
		ret = Token(t.getLoc(), termPostfixExpression, pos); :}

	| float; {:Token t = this.tokenStack.back();
		size_t pos = this.ast.insert(t, termPostfixExpression);
		ret = Token(t.getLoc(), termPostfixExpression, pos); :}
