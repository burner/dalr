S := seatdModule

seatdModule :=
	ModuleDeclarationOpt DeclDefsOpt

ModuleDeclarationOpt :=
	ModuleKeyword ModuleName semicolon
	| epsilon

ModuleKeyword :=
	module		

ModuleName :=
	ModuleName dot Identifer
	| Identifier

DeclDefsOpt :=
	DeclDefsOpt DeclDef
	| epsilon

DeclDef :=
	ConditionalDeclaration
	| DeclDefNoConditional

DeclDefNoConditional :=
	AttributeSpecifier
	| StaticAssert
	| Declaration
	| ImportDeclaration
	| EnumDeclaration
	| TemplateMixin
	| TemplateDeclaration
	| FunctionTemplateDeclaration
	| ClassTemplateDeclaration
	| InterfaceTemplateDeclaration
	| StructTemplateDeclaration
	| ClassDeclaration
	| InterfaceDeclaration
	| AggregateDeclaration
	| Constructor
	| Destructor
	| Invariant
	| UnitTest
	| StaticConstructor
	| StaticDestructor
	| MixinDeclaration
	| semicolon
	| DebugSpecification
	| VersionSpecification

ConditionalDeclaration :=
	Condition colom
	| Condition DeclarationBlock
	| Condition DeclarationBlock else DeclarationBlock

Condition :=
	VersionCondition
	| DebugCondition
	| StaticIfCondition

VersionCondition :=
	version lparen Integer rparen
	| version lparen Identifier rparen

VersionSpecification :=
	version = Integer semicolon
	| version = Identifier semicolon

DebugCondition :=
	debug lparen Integer rparen
	| debug lparen Identifier rparen
	| debug

DebugSpecification :=
	debug = Identifier semicolon
	| debug = Integer semicolon

StaticIfCondition :=
	static if lparen AssignExpression rparen

StaticAssert :=
	static assert lparen AssignExpression comma AssignExpression rparen semicolon
	| static assert lparen AssignExpression rparen semicolon

ImportDeclaration :=
	import ImportList semicolon

ImportList :=
	Import comma ImportList
	| Import ImportBindListOpt
	| Import

Import :=
	Identifier = ModuleName
	| ModuleName

ImportBindListOpt :=
	colon ImportBindList
	| epsilon

ImportBindList :=
	ImportBindList comma ImportBind
	| ImportBind

ImportBind :=
	Identifier = Identifier
	| Identifier

AttributeSpecifier :=
	Attributes colon DeclDefsOpt
	| Attributes DeclarationBlock

Attributes :=
	Attributes Attribute
	| Attribute

Attribute :=
	StorageClassAttribute
	| ProtectionAttribute
	| LinkageAttribute
	| AlignAttribute
	| Pragma

StorageClassAttribute :=
	synchronized
	| deprecated
	| static
	| final
	| override
	| abstract
	| const
	| auto
	| scope

ProtectionAttribute :=
	private
	| package
	| protected
	| public
	| export

